{"version":3,"sources":["api/unsplash/index.js","features/backgroundImage/backgroundImageSlice.js","features/backgroundImage/BackgroundImage.js","api/openWeatherMap/index.js","features/weather/weatherSlice.js","features/weather/Weather.js","api/quotes/index.js","features/quote/quoteSlice.js","features/quote/Quote.js","features/error/errorSlice.js","features/error/Error.js","features/journal/journalSlice.js","features/journal/components/JournalEntry.js","features/journal/components/JournalEntries.js","features/journal/Journal.js","features/backgroundImage/components/BackgroundImageLeftControl.js","features/backgroundImage/components/BackgroundImageRightControl.js","App.js","app/store.js","index.js"],"names":["API_URL","concat","process","unsplashApi","getImage","async","response","fetch","json","results","map","result","urls","full","getBackgroundImage","createAsyncThunk","backgroundImageSlice","createSlice","name","initialState","imageUrls","currentImageUrlIndex","reducers","switchToNextBackgroundImage","state","length","switchToPreviousBackgroundImage","extraReducers","builder","addCase","fulfilled","action","payload","actions","BackgroundImage","useSelector","backgroundImage","dispatch","useDispatch","useEffect","_jsx","id","children","src","alt","openWeatherMapApi","getWeather","city","weatherMetadata","weather","temperature","main","temp","_ref","weatherSlice","metadata","setCity","setState","Weather","className","_jsxs","icon","description","quotesApi","getQuote","quoteData","quote","content","author","quoteSlice","Quote","errorSlice","errorMessage","retryHandler","clearErrorMessage","rejected","meta","arg","Error","error","onClick","journalSlice","entries","text","isDone","doneEntries","addJournalEntry","push","removeEntry","splice","toggleEntryDone","JournalEntry","Confetti","active","config","spread","JournalEntries","journal","COLORS","getEntryColor","index","Journal","newJournalEntry","setNewJournalEntry","useState","_Fragment","onSubmit","e","preventDefault","type","value","onChange","target","BackgroundImageLeftControl","BackgroundImageRightControl","App","configureStore","reducer","backgroundImageReducer","weatherReducer","quoteReducer","journalReducer","errorReducer","ReactDOM","createRoot","document","getElementById","render","React","StrictMode","Provider","store"],"mappings":"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","file":"static/js/main.e0a5d5d4.chunk.js","sourcesContent":["const API_URL = `https://api.unsplash.com/search/photos?query=random&page=1&per_page=5&client_id=${process.env.REACT_APP_UNSPLASH_ACCESS_KEY}`;\n\nexport const getImage = async () => {\n  const response = await fetch(API_URL);\n  const json = await response.json();\n\n  return json.results.map((result) => result.urls.full);\n};\n\nconst unsplashApi = {\n  getImage\n};\n\nexport default unsplashApi;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport unsplashApi from \"../../api/unsplash\";\n\nexport const getBackgroundImage = createAsyncThunk(\n  \"backgroundImage/getImage\",\n  unsplashApi.getImage\n);\n\nexport const backgroundImageSlice = createSlice({\n  name: \"backgroundImage\",\n  initialState: {\n    imageUrls: [],\n    currentImageUrlIndex: 0\n  },\n  reducers: {\n    switchToNextBackgroundImage: (state) => {\n      state.currentImageUrlIndex =\n        (state.currentImageUrlIndex + 1) % state.imageUrls.length;\n    },\n    switchToPreviousBackgroundImage: (state) => {\n      state.currentImageUrlIndex =\n        (state.currentImageUrlIndex - 1 + state.imageUrls.length) %\n        state.imageUrls.length;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getBackgroundImage.fulfilled, (state, action) => {\n      state.imageUrls = action.payload;\n      state.currentImageUrlIndex = 0;\n    });\n  }\n});\n\nexport const {\n  switchToNextBackgroundImage,\n  switchToPreviousBackgroundImage\n} = backgroundImageSlice.actions;\n\nexport default backgroundImageSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getBackgroundImage } from \"./backgroundImageSlice\";\n\nconst BackgroundImage = () => {\n  const { imageUrls, currentImageUrlIndex } = useSelector(\n    (state) => state.backgroundImage\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getBackgroundImage());\n  }, [dispatch]);\n\n  return (\n    <div id=\"background-image-container\">\n      <img src={imageUrls[currentImageUrlIndex]} alt=\"\" id=\"background-image\" />\n    </div>\n  );\n};\n\nexport default BackgroundImage;","const API_URL = `https://api.openweathermap.org/data/2.5/weather?appid=${process.env.REACT_APP_OPEN_WEATHER_MAP_API_KEY}&units=metric`;\n\nexport const getWeather = async (city, state) => {\n  const response = await fetch(`${API_URL}&q=${city},${state}`);\n  const json = await response.json();\n\n  return {\n    weatherMetadata: json.weather[0],\n    temperature: json.main.temp\n  };\n};\n\nconst openWeatherMapApi = {\n  getWeather\n};\n\nexport default openWeatherMapApi;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport openWeatherMapApi from \"../../api/openWeatherMap\";\n\nexport const getWeather = createAsyncThunk(\n  \"weather/getWeather\",\n  ({ city, state }) => openWeatherMapApi.getWeather(city, state)\n);\n\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState: {\n    city: \"London\",\n    state: \"MiddlesexS\",\n    metadata: {},\n    temperature: \"\"\n  },\n  reducers: (builder) => ({\n    setCity: (state, action) => {\n      state.city = action.payload;\n    },\n    setState: (state, action) => {\n      state.state = action.payload;\n    }\n  }),\n  extraReducers: (builder) => {\n    builder.addCase(getWeather.fulfilled, (state, action) => {\n      state.metadata = action.payload.weatherMetadata;\n      state.temperature = action.payload.temperature;\n    });\n  }\n});\n\nexport const { setCity, setState } = weatherSlice.actions;\n\nexport default weatherSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getWeather } from \"./weatherSlice\";\n\nconst Weather = () => {\n  const { metadata, temperature, city, state } = useSelector(\n    (state) => state.weather\n  );\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getWeather({ city, state }));\n  }, [dispatch, city, state]);\n\n  return (\n    <div className=\"weather\">\n      <div className=\"temperature-container\">\n        <img\n          src={`http://openweathermap.org/img/wn/${metadata.icon}@2x.png`}\n          alt=\"\"\n        />\n        <div className=\"weather-text\">\n          <p className=\"temperature\">{temperature}°</p>\n          <p className=\"weather-description\">{metadata.description}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n","const API_URL = 'https://api.quotable.io/quotes/random?tags=technology,famous-quotes';\n\nexport const getQuote = async () => {\n    const response = await fetch(API_URL);\n    const json = await response.json();\n\n    const quoteData = json[0];\n    return {\n        quote: quoteData.content,\n        author: quoteData.author,\n    } \n};\n\nconst quotesApi = {\n  getQuote,\n};\n\nexport default quotesApi;\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport quotesApi from \"../../api/quotes\";\n\nexport const getQuote = createAsyncThunk(\"quote/getQuote\", quotesApi.getQuote);\n\nexport const quoteSlice = createSlice({\n  name: \"quote\",\n  initialState: {\n    quote: \"\",\n    author: \"\"\n  },\n  reducers: (builder) => ({}),\n  extraReducers: (builder) => {\n    builder.addCase(getQuote.fulfilled, (state, action) => {\n      state.quote = action.payload.quote;\n      state.author = action.payload.author;\n    });\n  }\n});\n\nexport default quoteSlice.reducer;\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getQuote } from \"./quoteSlice\";\n\nconst Quote = () => {\n  const { quote, author } = useSelector((state) => state.quote);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getQuote());\n  }, [dispatch]);\n\n  return (\n    <div id=\"quote\">\n      <p className=\"quote-message\">“{quote}”</p>\n      <p className=\"quote-author\">{author}</p>\n    </div>\n  );\n};\n\nexport default Quote;\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { getBackgroundImage } from \"../backgroundImage/backgroundImageSlice\";\nimport { getQuote } from \"../quote/quoteSlice\";\nimport { getWeather } from \"../weather/weatherSlice\";\n\nexport const errorSlice = createSlice({\n  name: \"errors\",\n  initialState: {\n    errorMessage: \"\",\n    retryHandler: null,\n  },\n  reducers: {\n    clearErrorMessage: (state) => {\n      state.errorMessage = \"\";\n      state.retryHandler = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getBackgroundImage.rejected, (state, action) => {\n        state.errorMessage = \"Getting image failed.\";\n        state.retryHandler = action.meta.arg;\n      })\n      .addCase(getQuote.rejected, (state, action) => {\n        state.errorMessage = \"Getting the quote failed.\";\n        state.retryHandler = action.meta.arg;\n      })\n      .addCase(getWeather.rejected, (state, action) => {\n        state.errorMessage = \"Getting the weather failed.\";\n        state.retryHandler = action.meta.arg;\n      });\n  },\n});\n\nexport const { clearErrorMessage } = errorSlice.actions;\n\nexport default errorSlice.reducer;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clearErrorMessage } from \"./errorSlice\";\n\nconst Error = () => {\n  const { errorMessage, retryHandler } = useSelector((state) => state.error);\n  const dispatch = useDispatch();\n\n  if (!errorMessage) {\n    return null;\n  }\n\n  return (\n    <div id=\"error-message-container\">\n      <p>{errorMessage}</p>\n      <button\n        aria-label=\"Dismiss error\"\n        onClick={() => {\n          dispatch(retryHandler());\n          dispatch(clearErrorMessage());\n        }}\n      >\n        X\n      </button>\n    </div>\n  );\n};\n\nexport default Error;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const journalSlice = createSlice({\n  name: \"journal\",\n  initialState: {\n    entries: [\n      { text: \"Water plants\", isDone: false },\n      { text: \"Take dog for a walk\", isDone: false },\n      { text: \"watch Wimbledon Tenniw\", isDone: false },\n      { text: \"Make smoke salmon canapes\", isDone: false },\n    ],\n    doneEntries: []\n  },\n  reducers: {\n    addJournalEntry: (state, action) => {\n      state.entries.push({ text: action.payload, isDone: false });\n    },\n    removeEntry: (state, action) => {\n      state.entries.splice(action.payload, 1);\n    },\n    toggleEntryDone: (state, action) => {\n      state.entries[action.payload].isDone = !state.entries[action.payload]\n        .isDone;\n    }\n  }\n});\n\nexport const {\n  addJournalEntry,\n  removeEntry,\n  toggleEntryDone\n} = journalSlice.actions;\n\nexport default journalSlice.reducer;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { removeEntry, toggleEntryDone } from \"../journalSlice\";\nimport Confetti from \"react-dom-confetti\";\n\nconst JournalEntry = ({ children, id, isDone }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className={`entry`}>\n      <div className=\"entry-actions-container\">\n        <button\n          aria-label=\"Remove\"\n          className=\"remove\"\n          onClick={() => dispatch(removeEntry(id))}\n        >\n          Remove\n        </button>\n        <button\n          aria-label=\"Mark Done\"\n          className=\"done\"\n          onClick={() => {\n            dispatch(toggleEntryDone(id));\n          }}\n        >\n          {isDone ? \"Redo\" : \"Done\"}\n          <Confetti active={isDone} config={{ spread: 360 }} />\n        </button>\n      </div>\n      {children}\n    </div>\n  );\n};\n\nexport default JournalEntry;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport JournalEntry from \"./JournalEntry\";\n\nconst JournalEntries = () => {\n  const { entries } = useSelector((state) => state.journal);\n  const COLORS = [\n    \"surface-blue\",\n    \"surface-red\",\n    \"surface-green\",\n    \"surface-orange\"\n  ];\n\n  const getEntryColor = (index) => COLORS[index % COLORS.length];\n\n  return (\n    <div className=\"surface\">\n      <ul className=\"entries-list\">\n        {entries.map(({ text, isDone }, index) => (\n          <li\n            key={text}\n            className={`${getEntryColor(index)} surface-styles ${\n              isDone ? \"entry-done\" : \"\"\n            }`}\n          >\n            <JournalEntry id={index} isDone={isDone}>\n              {text}\n            </JournalEntry>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default JournalEntries;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport JournalEntries from \"./components/JournalEntries\";\nimport { addJournalEntry } from \"./journalSlice\";\n\nconst Journal = () => {\n  const [newJournalEntry, setNewJournalEntry] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n\n    if (newJournalEntry === \"\") {\n      return;\n    }\n\n    dispatch(addJournalEntry(newJournalEntry));\n    setNewJournalEntry(\"\");\n  };\n\n  return (\n    <>\n      <div id=\"journal\" className=\"surface\">\n        <h2>What would you like to do today?</h2>\n\n        <form onSubmit={onFormSubmit}>\n          <input\n            type=\"text\"\n            className=\"journal-input\"\n            value={newJournalEntry}\n            onChange={(e) => {\n              setNewJournalEntry(e.target.value);\n            }}\n            aria-label=\"New journal entry\"\n          />\n        </form>\n      </div>\n      <JournalEntries />\n    </>\n  );\n};\n\nexport default Journal;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { switchToPreviousBackgroundImage } from \"../backgroundImageSlice\";\n\nconst BackgroundImageLeftControl = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <button\n      aria-label=\"Switch to previous wallpaper\"\n      onClick={() => {\n        dispatch(switchToPreviousBackgroundImage());\n      }}\n    >\n      {\"<\"}\n    </button>\n  );\n};\n\nexport default BackgroundImageLeftControl;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { switchToNextBackgroundImage } from \"../backgroundImageSlice\";\n\nconst BackgroundImageRightControl = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <button\n      aria-label=\"Switch to next wallpaper\"\n      onClick={() => {\n        dispatch(switchToNextBackgroundImage());\n      }}\n    >\n      {\">\"}\n    </button>\n  );\n};\n\nexport default BackgroundImageRightControl;\n","import React from \"react\";\nimport BackgroundImage from \"./features/backgroundImage/BackgroundImage\";\nimport Weather from \"./features/weather/Weather\";\nimport Quote from \"./features/quote/Quote\";\nimport Error from \"./features/error/Error\";\nimport Journal from \"./features/journal/Journal\";\nimport BackgroundImageLeftControl from \"./features/backgroundImage/components/BackgroundImageLeftControl\";\nimport BackgroundImageRightControl from \"./features/backgroundImage/components/BackgroundImageRightControl\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BackgroundImage />\n      <header>\n        <Error />\n        <Weather />\n      </header>\n      <aside className=\"left-wallpaper-control wallpaper-control\">\n        <BackgroundImageLeftControl />\n      </aside>\n      <main>\n        <Journal />\n      </main>\n      <aside className=\"right-wallpaper-control wallpaper-control\">\n        <BackgroundImageRightControl />\n      </aside>\n      <footer>\n      <Quote />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport backgroundImageReducer from \"../features/backgroundImage/backgroundImageSlice\";\nimport journalReducer from \"../features/journal/journalSlice\";\nimport quoteReducer from \"../features/quote/quoteSlice\";\nimport weatherReducer from \"../features/weather/weatherSlice\";\nimport errorReducer from \"../features/error/errorSlice\";\n\nexport default configureStore({\n  reducer: {\n    backgroundImage: backgroundImageReducer,\n    weather: weatherReducer,\n    quote: quoteReducer,\n    journal: journalReducer,\n    error: errorReducer\n  }\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n);\n"],"sourceRoot":""}